{"version":3,"sources":["../src/csv2i18njson.js"],"names":["inputFile","outputDir","fs","readFileAsync","buff","content","toString","rows","indexOf","split","length","files","firstRowCols","i","currentCol","trim","substring","push","outputMap","shift","each","x","base","rowParts","row","setPath","key","console","log","join","writeFileAsync","JSON","stringify","convertToJSONs","promisifyAll","path","value","current"],"mappings":"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","file":"csv2i18njson.js","sourcesContent":["import Promise from \"bluebird\";\r\nimport _fs from \"fs-extra\";\r\nimport _ from \"underscore\";\r\nimport path from \"path\";\r\n\r\nconst fs = Promise.promisifyAll(_fs);\r\n/**\r\n * @param base {Object}\r\n * @param path {Array<String> }\r\n * @param value {String}\r\n */\r\nlet setPath = (base, path, value) => {\r\n    let current = path[0];\r\n    if (path.length === 1) {\r\n        if (typeof base[current] !== 'undefined') {\r\n            throw 'trying to set value ' + value + ' to field ' + current + ' but it\\'s not undefined';\r\n        } else {\r\n            base[current] = value.substring(1, value.length - 1);\r\n        }\r\n    } else if (path.length > 1) {\r\n        if (typeof base[current] === 'undefined') {\r\n            base[current] = {};\r\n        } else if (typeof base[current] === 'string') {\r\n            throw 'trying to create new object in field ' + current + ' but it\\'s already a string';\r\n        }\r\n        path.shift();\r\n        return setPath(base[current], path, value);\r\n    } else {\r\n        throw 'path must be longer than 0';\r\n    }\r\n};\r\n\r\n/**\r\n * @method convertToJSONs\r\n * @param inputFile {String}\r\n * @param outputDir {String}\r\n */\r\nexport async function convertToJSONs(inputFile, outputDir) {\r\n    let buff = await fs.readFileAsync(inputFile);\r\n    let content = buff.toString();\r\n    let rows;\r\n    if (content.indexOf('\\r\\n') > -1) {\r\n        rows = content.split('\\r\\n');\r\n    } else if (content.indexOf('\\r') > -1) {\r\n        rows = content.split('\\r');\r\n    } else {\r\n        rows = content.split('\\n');\r\n    }\r\n\r\n    if (rows.length < 1) {\r\n        throw 'the file must contain at least 1 row';\r\n    }\r\n\r\n    let files = [];\r\n\r\n\r\n    let firstRowCols = rows[0].split(';');\r\n    if (firstRowCols.length < 2) {\r\n        throw 'the file must contain at least 2 columns';\r\n    }\r\n    for (let i = 1; i < firstRowCols.length; i++) {\r\n        let currentCol = firstRowCols[i].trim();\r\n        currentCol = currentCol.substring(1, currentCol.length - 1);\r\n        if (currentCol.length === 0) {\r\n            if (i === 1) {\r\n                throw 'the file must contain at least 2 columns';\r\n            }\r\n            break;\r\n        } else {\r\n            files.push(currentCol);\r\n        }\r\n    }\r\n\r\n    let outputMap = {\r\n\r\n    };\r\n\r\n    for(let i = 0; i < files.length; i++) {\r\n        outputMap[files[i]] = {};\r\n    }\r\n\r\n\r\n    //right here we remove the first line since it's the headline\r\n    rows.shift();\r\n    _.each(rows, row => {\r\n        for(let x = 0; x < files.length; x++) {\r\n            let base = outputMap[files[x]];\r\n            let rowParts = row.split(';');\r\n            setPath(base, rowParts[0].split('.'), rowParts[x+1]);\r\n        }\r\n    });\r\n\r\n\r\n\r\n    for(let key in outputMap) {\r\n        console.log(`writing to ` + path.join(outputDir, `out_${key}`));\r\n        await fs.writeFileAsync(path.join(outputDir, `out_${key}`), JSON.stringify(outputMap[key], null, 3));\r\n    }\r\n}"]}