{"version":3,"sources":["../src/csv2i18njson.js"],"names":["inputFile","outputDir","fs","readFileAsync","buff","content","toString","parse","delimiter","rows","length","files","firstRowCols","JSON","stringify","i","currentCol","trim","push","outputMap","shift","each","x","base","setPath","row","split","key","console","log","join","writeFileAsync","convertToJSONs","promisifyAll","promisify","path","value","current"],"mappings":"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","file":"csv2i18njson.js","sourcesContent":["import Promise from \"bluebird\";\r\nimport _fs from \"fs-extra\";\r\nimport _ from \"underscore\";\r\nimport path from \"path\";\r\nimport _parse from \"csv-parse\";\r\n\r\nconst fs = Promise.promisifyAll(_fs);\r\nconst parse = Promise.promisify(_parse);\r\n/**\r\n * @param base {Object}\r\n * @param path {Array<String> }\r\n * @param value {String}\r\n */\r\nlet setPath = (base, path, value) => {\r\n    let current = path[0];\r\n    if (path.length === 1) {\r\n        if (typeof base[current] !== 'undefined') {\r\n            throw 'trying to set value ' + value + ' to field ' + current + ' but it\\'s not undefined';\r\n        } else {\r\n            base[current] = value;\r\n        }\r\n    } else if (path.length > 1) {\r\n        if (typeof base[current] === 'undefined') {\r\n            base[current] = {};\r\n        } else if (typeof base[current] === 'string') {\r\n            throw 'trying to create new object in field ' + current + ' but it\\'s already a string';\r\n        }\r\n        path.shift();\r\n        return setPath(base[current], path, value);\r\n    } else {\r\n        throw 'path must be longer than 0';\r\n    }\r\n};\r\n\r\n/**\r\n * @method convertToJSONs\r\n * @param inputFile {String}\r\n * @param outputDir {String}\r\n */\r\nexport async function convertToJSONs(inputFile, outputDir) {\r\n    let buff = await fs.readFileAsync(inputFile);\r\n    let content = buff.toString();\r\n    let rows = await parse(content, {\r\n        delimiter: ';'\r\n    });\r\n\r\n    if (rows.length < 1) {\r\n        throw 'the file must contain at least 1 row';\r\n    }\r\n\r\n    let files = [];\r\n\r\n\r\n    let firstRowCols = JSON.parse(JSON.stringify(rows[0]));\r\n    if (firstRowCols.length < 2) {\r\n        throw 'the file must contain at least 2 columns';\r\n    }\r\n    for (let i = 1; i < firstRowCols.length; i++) {\r\n        let currentCol = firstRowCols[i].trim();\r\n        if (currentCol.length === 0) {\r\n            if (i === 1) {\r\n                throw 'the file must contain at least 2 columns';\r\n            }\r\n            break;\r\n        } else {\r\n            files.push(currentCol);\r\n        }\r\n    }\r\n\r\n\r\n    let outputMap = {};\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n        outputMap[files[i]] = {};\r\n    }\r\n\r\n    //right here we remove the first line since it's the headline\r\n    rows.shift();\r\n    _.each(rows, row => {\r\n        for (let x = 0; x < files.length; x++) {\r\n            let base = outputMap[files[x]];\r\n            setPath(base, row[0].split('.'), row[x + 1]);\r\n        }\r\n    });\r\n\r\n\r\n    for (let key in outputMap) {\r\n        console.log(`writing to ` + path.join(outputDir, `out_${key}`));\r\n        await fs.writeFileAsync(path.join(outputDir, `out_${key}`), JSON.stringify(outputMap[key], null, 3));\r\n    }\r\n}"]}