{"version":3,"sources":["../src/i18njson2csv.js"],"names":["directory","outputFile","fs","readdirAsync","file","substr","files","filter","allKeys","console","log","green","join","jsonMap","i","length","readJsonAsync","json","concat","getKeysRecursive","uniq","items","key","item","translations","x","push","getValueByPath","split","sort","a","b","csv","map","each","translation","writeFileAsync","convertToCSV","promisifyAll","obj","base","keys","orange","path","currentKey","shift"],"mappings":"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","file":"i18njson2csv.js","sourcesContent":["import Promise from \"bluebird\";\r\nimport _fs from \"fs-extra\";\r\nimport path from \"path\";\r\nimport chalk from \"chalk\";\r\nimport _ from \"underscore\";\r\n\r\nconst fs = Promise.promisifyAll(_fs);\r\n\r\n/**\r\n * @param obj {Object}\r\n * @param [base] {String}\r\n * @returns {Array<String>}\r\n */\r\nlet getKeysRecursive = (obj, base = '') => {\r\n    let keys = [];\r\n    for (let key in obj) {\r\n        if (typeof obj[key] === 'string') {\r\n            keys.push(`${base}${key}`);\r\n        } else if (typeof obj[key] === 'object') {\r\n            keys = keys.concat(getKeysRecursive(obj[key], `${base}${key}.`));\r\n        } else {\r\n            console.log(chalk.orange('unable to get keys for element ' + obj[key]));\r\n        }\r\n    }\r\n    return keys;\r\n};\r\n\r\n/**\r\n * @param obj {Object}\r\n * @param path {Array}\r\n */\r\nlet getValueByPath = (obj, path) => {\r\n    if (path.length > 0 && typeof obj === 'object') {\r\n        let currentKey = path[0];\r\n        if (path.length === 1 && typeof obj[currentKey] === 'string') {\r\n            return obj[path[0]];\r\n        } else if (path.length > 1 && typeof obj[currentKey] === 'object') {\r\n            path.shift();\r\n            return getValueByPath(obj[currentKey], path);\r\n        } else {\r\n            return null;\r\n        }\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * @method convertToCSV\r\n * @param directory {String}\r\n * @param outputFile {String}\r\n */\r\nexport async function convertToCSV(directory, outputFile) {\r\n    let files = _.filter(await fs.readdirAsync(directory), file => {\r\n        return file.substr(-5) === '.json';\r\n    });\r\n    if (!files) {\r\n        throw 'no json files found';\r\n    }\r\n    let allKeys = [];\r\n    console.log(chalk.green(`Processing the following files: ${files.join(', ')}`));\r\n\r\n    //a map containing all jsons (Key is filename, value is json)\r\n    let jsonMap = {};\r\n\r\n    //now we iterate over all files and get all available keys\r\n    for (let i = 0; i < files.length; i++) {\r\n        let json = await fs.readJsonAsync(path.join(directory, files[i]));\r\n        jsonMap[files[i]] = json;\r\n        allKeys = allKeys.concat(getKeysRecursive(json));\r\n    }\r\n    allKeys = _.uniq(allKeys);\r\n\r\n    console.log(`Got a total of ${allKeys.length} unique entries`);\r\n\r\n    let items = [];\r\n    for (let i = 0; i < allKeys.length; i++) {\r\n        let key = allKeys[i];\r\n        let item = {key: allKeys[i], translations: []};\r\n        for (let x = 0; x < files.length; x++) {\r\n            let file = files[x];\r\n            item.translations.push(getValueByPath(jsonMap[file], key.split('.')) || '');\r\n        }\r\n        items.push(item);\r\n    }\r\n\r\n    items.sort((a, b) => {\r\n        if (a.key > b.key) return 1;\r\n        if (a.key < b.key) return -1;\r\n        return 0;\r\n    });\r\n\r\n    let csv = `key;${files.map(file => `\"${file}\"`).join(';')}`;\r\n    _.each(items, item => {\r\n        csv += `\\r\\n${item.key};${item.translations.map(translation => `\"${translation}\"`).join(';')}`;\r\n    });\r\n\r\n    await fs.writeFileAsync(outputFile, csv);\r\n\r\n}"]}